<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/isincountry/sdk/ApiClient.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/isincountry/sdk/ApiClient.java" />
              <option name="originalContent" value="package com.example.isincountry.sdk;&#10;&#10;import com.google.gson.Gson;&#10;import com.google.gson.GsonBuilder;&#10;import okhttp3.*;&#10;import okhttp3.logging.HttpLoggingInterceptor;&#10;import java.io.IOException;&#10;import java.util.concurrent.TimeUnit;&#10;&#10;/**&#10; * API Client for communicating with the IsInCountry server&#10; */&#10;public class ApiClient {&#10;    private static final String ENDPOINT_CHECK_LOCATION = &quot;/api/v1/check&quot;;&#10;    private static final String ENDPOINT_GET_COUNTRIES = &quot;/api/v1/countries&quot;;&#10;    private static final int TIMEOUT_SECONDS = 30;&#10;&#10;    private OkHttpClient httpClient;&#10;    private Gson gson;&#10;    private String serverUrl;&#10;&#10;    public ApiClient() {&#10;        setupHttpClient();&#10;        setupGson();&#10;    }&#10;&#10;    private void setupHttpClient() {&#10;        HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();&#10;        loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);&#10;&#10;        httpClient = new OkHttpClient.Builder()&#10;                .addInterceptor(loggingInterceptor)&#10;                .connectTimeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)&#10;                .readTimeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)&#10;                .writeTimeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)&#10;                .build();&#10;    }&#10;&#10;    private void setupGson() {&#10;        gson = new GsonBuilder()&#10;                .setPrettyPrinting()&#10;                .create();&#10;    }&#10;&#10;    public void setServerUrl(String serverUrl) {&#10;        this.serverUrl = serverUrl.endsWith(&quot;/&quot;) ? serverUrl.substring(0, serverUrl.length() - 1) : serverUrl;&#10;    }&#10;&#10;    /**&#10;     * Check if coordinates are within a country&#10;     * @param request Location request containing coordinates and country code&#10;     * @param callback Callback to receive the result&#10;     */&#10;    public void checkLocation(LocationRequest request, IsInCountrySDK.LocationCheckCallback callback) {&#10;        if (serverUrl == null) {&#10;            callback.onError(&quot;Server URL not set&quot;);&#10;            return;&#10;        }&#10;&#10;        String json = gson.toJson(request);&#10;        RequestBody requestBody = RequestBody.create(json, MediaType.get(&quot;application/json; charset=utf-8&quot;));&#10;&#10;        Request httpRequest = new Request.Builder()&#10;                .url(serverUrl + ENDPOINT_CHECK_LOCATION)&#10;                .post(requestBody)&#10;                .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .build();&#10;&#10;        httpClient.newCall(httpRequest).enqueue(new Callback() {&#10;            @Override&#10;            public void onFailure(Call call, IOException e) {&#10;                callback.onError(&quot;Network error: &quot; + e.getMessage());&#10;            }&#10;&#10;            @Override&#10;            public void onResponse(Call call, Response response) throws IOException {&#10;                try {&#10;                    if (response.isSuccessful()) {&#10;                        String responseBody = response.body().string();&#10;&#10;                        // Parse the server response format&#10;                        ServerResponse serverResponse = gson.fromJson(responseBody, ServerResponse.class);&#10;&#10;                        if (serverResponse != null &amp;&amp; serverResponse.success) {&#10;                            boolean isInside = serverResponse.data.is_inside_country;&#10;                            String message = &quot;Country: &quot; + serverResponse.data.country_name +&#10;                                           &quot;\nCoordinates: &quot; + serverResponse.data.latitude + &quot;, &quot; + serverResponse.data.longitude +&#10;                                           &quot;\nChecked at: &quot; + serverResponse.data.checked_at;&#10;                            callback.onResult(isInside, message);&#10;                        } else {&#10;                            String error = serverResponse != null ? serverResponse.error : &quot;Unknown error&quot;;&#10;                            callback.onError(&quot;Server error: &quot; + error);&#10;                        }&#10;                    } else {&#10;                        String errorBody = response.body() != null ? response.body().string() : &quot;Unknown error&quot;;&#10;                        callback.onError(&quot;Server error (&quot; + response.code() + &quot;): &quot; + errorBody);&#10;                    }&#10;                } catch (Exception e) {&#10;                    callback.onError(&quot;Response parsing error: &quot; + e.getMessage());&#10;                } finally {&#10;                    response.close();&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Get list of all available countries&#10;     * @param callback Callback to receive the countries list&#10;     */&#10;    public void getCountries(IsInCountrySDK.CountriesCallback callback) {&#10;        if (serverUrl == null) {&#10;            callback.onError(&quot;Server URL not set&quot;);&#10;            return;&#10;        }&#10;&#10;        Request httpRequest = new Request.Builder()&#10;                .url(serverUrl + ENDPOINT_GET_COUNTRIES)&#10;                .get()&#10;                .build();&#10;&#10;        httpClient.newCall(httpRequest).enqueue(new Callback() {&#10;            @Override&#10;            public void onFailure(Call call, IOException e) {&#10;                callback.onError(&quot;Network error: &quot; + e.getMessage());&#10;            }&#10;&#10;            @Override&#10;            public void onResponse(Call call, Response response) throws IOException {&#10;                try {&#10;                    if (response.isSuccessful()) {&#10;                        String responseBody = response.body().string();&#10;&#10;                        // Parse the server response format&#10;                        CountriesResponse countriesResponse = gson.fromJson(responseBody, CountriesResponse.class);&#10;&#10;                        if (countriesResponse != null &amp;&amp; countriesResponse.success) {&#10;                            callback.onResult(countriesResponse);&#10;                        } else {&#10;                            String error = countriesResponse != null ? countriesResponse.error : &quot;Unknown error&quot;;&#10;                            callback.onError(&quot;Server error: &quot; + error);&#10;                        }&#10;                    } else {&#10;                        String errorBody = response.body() != null ? response.body().string() : &quot;Unknown error&quot;;&#10;                        callback.onError(&quot;Server error (&quot; + response.code() + &quot;): &quot; + errorBody);&#10;                    }&#10;                } catch (Exception e) {&#10;                    callback.onError(&quot;Response parsing error: &quot; + e.getMessage());&#10;                } finally {&#10;                    response.close();&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    // Inner classes to match server response format&#10;    private static class ServerResponse {&#10;        boolean success;&#10;        ServerData data;&#10;        String error;&#10;    }&#10;&#10;    private static class ServerData {&#10;        boolean is_inside_country;&#10;        double latitude;&#10;        double longitude;&#10;        String country_code;&#10;        String country_name;&#10;        String checked_at;&#10;    }&#10;&#10;    public static class CountriesResponse {&#10;        public boolean success;&#10;        public Country[] data;&#10;        public int count;&#10;        public String error;&#10;    }&#10;&#10;    public static class Country {&#10;        public String code;&#10;        public String name;&#10;        // Add other fields as needed based on your Country model&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.isincountry.sdk;&#10;&#10;import com.google.gson.Gson;&#10;import com.google.gson.GsonBuilder;&#10;import okhttp3.*;&#10;import okhttp3.logging.HttpLoggingInterceptor;&#10;import java.io.IOException;&#10;import java.util.concurrent.TimeUnit;&#10;&#10;/**&#10; * API Client for communicating with the IsInCountry server&#10; */&#10;public class ApiClient {&#10;    private static final String ENDPOINT_CHECK_LOCATION = &quot;/api/v1/check&quot;;&#10;    private static final String ENDPOINT_GET_COUNTRIES = &quot;/api/v1/countries&quot;;&#10;    private static final int TIMEOUT_SECONDS = 30;&#10;&#10;    private OkHttpClient httpClient;&#10;    private Gson gson;&#10;    private String serverUrl;&#10;&#10;    public ApiClient() {&#10;        setupHttpClient();&#10;        setupGson();&#10;    }&#10;&#10;    private void setupHttpClient() {&#10;        HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();&#10;        loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);&#10;&#10;        httpClient = new OkHttpClient.Builder()&#10;                .addInterceptor(loggingInterceptor)&#10;                .connectTimeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)&#10;                .readTimeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)&#10;                .writeTimeout(TIMEOUT_SECONDS, TimeUnit.SECONDS)&#10;                .build();&#10;    }&#10;&#10;    private void setupGson() {&#10;        gson = new GsonBuilder()&#10;                .setPrettyPrinting()&#10;                .create();&#10;    }&#10;&#10;    public void setServerUrl(String serverUrl) {&#10;        this.serverUrl = serverUrl.endsWith(&quot;/&quot;) ? serverUrl.substring(0, serverUrl.length() - 1) : serverUrl;&#10;    }&#10;&#10;    /**&#10;     * Check if coordinates are within a country&#10;     * @param request Location request containing coordinates and country code&#10;     * @param callback Callback to receive the result&#10;     */&#10;    public void checkLocation(LocationRequest request, IsInCountrySDK.LocationCheckCallback callback) {&#10;        if (serverUrl == null) {&#10;            callback.onError(&quot;Server URL not set&quot;);&#10;            return;&#10;        }&#10;&#10;        String json = gson.toJson(request);&#10;        RequestBody requestBody = RequestBody.create(json, MediaType.get(&quot;application/json; charset=utf-8&quot;));&#10;&#10;        Request httpRequest = new Request.Builder()&#10;                .url(serverUrl + ENDPOINT_CHECK_LOCATION)&#10;                .post(requestBody)&#10;                .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .build();&#10;&#10;        httpClient.newCall(httpRequest).enqueue(new Callback() {&#10;            @Override&#10;            public void onFailure(Call call, IOException e) {&#10;                callback.onError(&quot;Network error: &quot; + e.getMessage());&#10;            }&#10;&#10;            @Override&#10;            public void onResponse(Call call, Response response) throws IOException {&#10;                try {&#10;                    if (response.isSuccessful()) {&#10;                        String responseBody = response.body().string();&#10;&#10;                        // Parse the server response format&#10;                        ServerResponse serverResponse = gson.fromJson(responseBody, ServerResponse.class);&#10;&#10;                        if (serverResponse != null &amp;&amp; serverResponse.success) {&#10;                            boolean isInside = serverResponse.data.is_inside_country;&#10;                            String message = &quot;Country: &quot; + serverResponse.data.country_name +&#10;                                           &quot;\nCoordinates: &quot; + serverResponse.data.latitude + &quot;, &quot; + serverResponse.data.longitude +&#10;                                           &quot;\nChecked at: &quot; + serverResponse.data.checked_at;&#10;                            callback.onResult(isInside, message);&#10;                        } else {&#10;                            String error = serverResponse != null ? serverResponse.error : &quot;Unknown error&quot;;&#10;                            callback.onError(&quot;Server error: &quot; + error);&#10;                        }&#10;                    } else {&#10;                        String errorBody = response.body() != null ? response.body().string() : &quot;Unknown error&quot;;&#10;                        callback.onError(&quot;Server error (&quot; + response.code() + &quot;): &quot; + errorBody);&#10;                    }&#10;                } catch (Exception e) {&#10;                    callback.onError(&quot;Response parsing error: &quot; + e.getMessage());&#10;                } finally {&#10;                    response.close();&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Get list of all available countries&#10;     * @param callback Callback to receive the countries list&#10;     */&#10;    public void getCountries(IsInCountrySDK.CountriesCallback callback) {&#10;        if (serverUrl == null) {&#10;            callback.onError(&quot;Server URL not set&quot;);&#10;            return;&#10;        }&#10;&#10;        Request httpRequest = new Request.Builder()&#10;                .url(serverUrl + ENDPOINT_GET_COUNTRIES)&#10;                .get()&#10;                .build();&#10;&#10;        httpClient.newCall(httpRequest).enqueue(new Callback() {&#10;            @Override&#10;            public void onFailure(Call call, IOException e) {&#10;                callback.onError(&quot;Network error: &quot; + e.getMessage());&#10;            }&#10;&#10;            @Override&#10;            public void onResponse(Call call, Response response) throws IOException {&#10;                try {&#10;                    if (response.isSuccessful()) {&#10;                        String responseBody = response.body().string();&#10;&#10;                        // Parse the server response format&#10;                        CountriesResponse countriesResponse = gson.fromJson(responseBody, CountriesResponse.class);&#10;&#10;                        if (countriesResponse != null &amp;&amp; countriesResponse.success) {&#10;                            callback.onResult(countriesResponse);&#10;                        } else {&#10;                            String error = countriesResponse != null ? countriesResponse.error : &quot;Unknown error&quot;;&#10;                            callback.onError(&quot;Server error: &quot; + error);&#10;                        }&#10;                    } else {&#10;                        String errorBody = response.body() != null ? response.body().string() : &quot;Unknown error&quot;;&#10;                        callback.onError(&quot;Server error (&quot; + response.code() + &quot;): &quot; + errorBody);&#10;                    }&#10;                } catch (Exception e) {&#10;                    callback.onError(&quot;Response parsing error: &quot; + e.getMessage());&#10;                } finally {&#10;                    response.close();&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    // Inner classes to match server response format&#10;    private static class ServerResponse {&#10;        boolean success;&#10;        ServerData data;&#10;        String error;&#10;    }&#10;&#10;    private static class ServerData {&#10;        boolean is_inside_country;&#10;        double latitude;&#10;        double longitude;&#10;        String country_code;&#10;        String country_name;&#10;        String checked_at;&#10;    }&#10;&#10;    public static class CountriesResponse {&#10;        public boolean success;&#10;        public Country[] data;&#10;        public int count;&#10;        public String error;&#10;    }&#10;&#10;    public static class Country {&#10;        public int id;&#10;        public String country_code;&#10;        public String country_name;&#10;        public String created_at;&#10;        public String updated_at;&#10;        &#10;        public String getCountryCode() {&#10;            return country_code;&#10;        }&#10;        &#10;        public String getCountryName() {&#10;            return country_name;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/isincountry/sdk/CountriesResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/isincountry/sdk/CountriesResponse.java" />
              <option name="updatedContent" value="package com.example.isincountry.sdk;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Response model for countries API endpoint&#10; */&#10;public class CountriesResponse {&#10;    public boolean success;&#10;    public List&lt;Country&gt; data;&#10;    public int count;&#10;    public String error;&#10;&#10;    public CountriesResponse() {}&#10;&#10;    public CountriesResponse(boolean success, List&lt;Country&gt; data, int count, String error) {&#10;        this.success = success;&#10;        this.data = data;&#10;        this.count = count;&#10;        this.error = error;&#10;    }&#10;&#10;    public boolean isSuccess() {&#10;        return success;&#10;    }&#10;&#10;    public void setSuccess(boolean success) {&#10;        this.success = success;&#10;    }&#10;&#10;    public List&lt;Country&gt; getData() {&#10;        return data;&#10;    }&#10;&#10;    public void setData(List&lt;Country&gt; data) {&#10;        this.data = data;&#10;    }&#10;&#10;    public int getCount() {&#10;        return count;&#10;    }&#10;&#10;    public void setCount(int count) {&#10;        this.count = count;&#10;    }&#10;&#10;    public String getError() {&#10;        return error;&#10;    }&#10;&#10;    public void setError(String error) {&#10;        this.error = error;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;CountriesResponse{&quot; +&#10;                &quot;success=&quot; + success +&#10;                &quot;, data=&quot; + data +&#10;                &quot;, count=&quot; + count +&#10;                &quot;, error='&quot; + error + '\'' +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/isincountry/sdk/Country.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/isincountry/sdk/Country.java" />
              <option name="updatedContent" value="package com.example.isincountry.sdk;&#10;&#10;/**&#10; * Model class representing a country from the API response&#10; */&#10;public class Country {&#10;    private int id;&#10;    private String country_code;&#10;    private String country_name;&#10;    private String created_at;&#10;    private String updated_at;&#10;&#10;    public Country() {}&#10;&#10;    public Country(int id, String country_code, String country_name, String created_at, String updated_at) {&#10;        this.id = id;&#10;        this.country_code = country_code;&#10;        this.country_name = country_name;&#10;        this.created_at = created_at;&#10;        this.updated_at = updated_at;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getCountryCode() {&#10;        return country_code;&#10;    }&#10;&#10;    public void setCountryCode(String country_code) {&#10;        this.country_code = country_code;&#10;    }&#10;&#10;    public String getCountryName() {&#10;        return country_name;&#10;    }&#10;&#10;    public void setCountryName(String country_name) {&#10;        this.country_name = country_name;&#10;    }&#10;&#10;    public String getCreatedAt() {&#10;        return created_at;&#10;    }&#10;&#10;    public void setCreatedAt(String created_at) {&#10;        this.created_at = created_at;&#10;    }&#10;&#10;    public String getUpdatedAt() {&#10;        return updated_at;&#10;    }&#10;&#10;    public void setUpdatedAt(String updated_at) {&#10;        this.updated_at = updated_at;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Country{&quot; +&#10;                &quot;id=&quot; + id +&#10;                &quot;, country_code='&quot; + country_code + '\'' +&#10;                &quot;, country_name='&quot; + country_name + '\'' +&#10;                &quot;, created_at='&quot; + created_at + '\'' +&#10;                &quot;, updated_at='&quot; + updated_at + '\'' +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>