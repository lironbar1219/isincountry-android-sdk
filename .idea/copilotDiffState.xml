<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/isincountry/sdk/IsInCountrySDK.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/isincountry/sdk/IsInCountrySDK.java" />
              <option name="originalContent" value="package com.example.isincountry.sdk;&#10;&#10;import android.Manifest;&#10;import android.content.Context;&#10;import android.content.pm.PackageManager;&#10;import android.location.Location;&#10;import android.telephony.TelephonyManager;&#10;import androidx.annotation.RequiresPermission;&#10;import androidx.core.app.ActivityCompat;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.tasks.Task;&#10;import java.util.Locale;&#10;&#10;/**&#10; * IsInCountry SDK - Main class for checking if device location is within a specific country&#10; */&#10;public class IsInCountrySDK {&#10;    private static IsInCountrySDK instance;&#10;    private Context context;&#10;    private FusedLocationProviderClient fusedLocationClient;&#10;    private ApiClient apiClient;&#10;    private String serverUrl;&#10;&#10;    private IsInCountrySDK(Context context) {&#10;        this.context = context.getApplicationContext();&#10;        this.fusedLocationClient = LocationServices.getFusedLocationProviderClient(this.context);&#10;        this.apiClient = new ApiClient();&#10;    }&#10;&#10;    /**&#10;     * Initialize the SDK with server URL&#10;     * @param context Application context&#10;     * @param serverUrl URL of the IsInCountry API server&#10;     * @return SDK instance&#10;     */&#10;    public static IsInCountrySDK initialize(Context context, String serverUrl) {&#10;        if (instance == null) {&#10;            instance = new IsInCountrySDK(context);&#10;        }&#10;        instance.serverUrl = serverUrl;&#10;        instance.apiClient.setServerUrl(serverUrl);&#10;        return instance;&#10;    }&#10;&#10;    /**&#10;     * Get the singleton instance&#10;     * @return SDK instance&#10;     */&#10;    public static IsInCountrySDK getInstance() {&#10;        if (instance == null) {&#10;            throw new IllegalStateException(&quot;SDK not initialized. Call initialize() first.&quot;);&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    /**&#10;     * Check if current device location is within the device's country&#10;     * @param callback Callback to receive the result&#10;     */&#10;    @RequiresPermission(anyOf = {Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION})&#10;    public void checkCurrentLocationInDeviceCountry(LocationCheckCallback callback) {&#10;        String countryCode = getDeviceCountryCode();&#10;        if (countryCode == null) {&#10;            callback.onError(&quot;Unable to determine device country&quot;);&#10;            return;&#10;        }&#10;        checkCurrentLocationInCountry(countryCode, callback);&#10;    }&#10;&#10;    /**&#10;     * Check if current device location is within a specific country&#10;     * @param countryCode ISO country code (e.g., &quot;US&quot;, &quot;GB&quot;, &quot;FR&quot;)&#10;     * @param callback Callback to receive the result&#10;     */&#10;    @RequiresPermission(anyOf = {Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION})&#10;    public void checkCurrentLocationInCountry(String countryCode, LocationCheckCallback callback) {&#10;        if (!hasLocationPermission()) {&#10;            callback.onError(&quot;Location permission not granted&quot;);&#10;            return;&#10;        }&#10;&#10;        getCurrentLocation(new LocationCallback() {&#10;            @Override&#10;            public void onLocationReceived(double latitude, double longitude) {&#10;                checkCoordinateInCountry(latitude, longitude, countryCode, callback);&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                callback.onError(&quot;Failed to get location: &quot; + error);&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Check if specific coordinates are within a country&#10;     * @param latitude Latitude coordinate&#10;     * @param longitude Longitude coordinate&#10;     * @param countryCode ISO country code&#10;     * @param callback Callback to receive the result&#10;     */&#10;    public void checkCoordinateInCountry(double latitude, double longitude, String countryCode, LocationCheckCallback callback) {&#10;        LocationRequest request = new LocationRequest(latitude, longitude, countryCode);&#10;        apiClient.checkLocation(request, callback);&#10;    }&#10;&#10;    /**&#10;     * Get current device location&#10;     * @param callback Callback to receive location&#10;     */&#10;    @RequiresPermission(anyOf = {Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION})&#10;    public void getCurrentLocation(LocationCallback callback) {&#10;        if (!hasLocationPermission()) {&#10;            callback.onError(&quot;Location permission not granted&quot;);&#10;            return;&#10;        }&#10;&#10;        @SuppressWarnings(&quot;MissingPermission&quot;)&#10;        Task&lt;Location&gt; locationTask = fusedLocationClient.getLastLocation();&#10;        locationTask.addOnSuccessListener(location -&gt; {&#10;            if (location != null) {&#10;                callback.onLocationReceived(location.getLatitude(), location.getLongitude());&#10;            } else {&#10;                callback.onError(&quot;Unable to get current location&quot;);&#10;            }&#10;        }).addOnFailureListener(e -&gt; callback.onError(&quot;Location error: &quot; + e.getMessage()));&#10;    }&#10;&#10;    /**&#10;     * Get device country code based on SIM card or network&#10;     * @return ISO country code or null if unavailable&#10;     */&#10;    public String getDeviceCountryCode() {&#10;        try {&#10;            TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);&#10;            if (tm != null) {&#10;                // Try SIM country first&#10;                String simCountry = tm.getSimCountryIso();&#10;                if (simCountry != null &amp;&amp; simCountry.length() == 2) {&#10;                    return simCountry.toUpperCase();&#10;                }&#10;&#10;                // Fall back to network country&#10;                String networkCountry = tm.getNetworkCountryIso();&#10;                if (networkCountry != null &amp;&amp; networkCountry.length() == 2) {&#10;                    return networkCountry.toUpperCase();&#10;                }&#10;            }&#10;&#10;            // Fall back to system locale&#10;            return Locale.getDefault().getCountry();&#10;        } catch (Exception e) {&#10;            return Locale.getDefault().getCountry();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Check if location permission is granted&#10;     * @return true if permission granted, false otherwise&#10;     */&#10;    public boolean hasLocationPermission() {&#10;        return ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED ||&#10;               ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED;&#10;    }&#10;&#10;    /**&#10;     * Callback interface for location results&#10;     */&#10;    public interface LocationCallback {&#10;        void onLocationReceived(double latitude, double longitude);&#10;        void onError(String error);&#10;    }&#10;&#10;    /**&#10;     * Callback interface for location check results&#10;     */&#10;    public interface LocationCheckCallback {&#10;        void onResult(boolean isInCountry, String message);&#10;        void onError(String error);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.isincountry.sdk;&#10;&#10;import android.Manifest;&#10;import android.content.Context;&#10;import android.content.pm.PackageManager;&#10;import android.location.Location;&#10;import android.telephony.TelephonyManager;&#10;import androidx.annotation.RequiresPermission;&#10;import androidx.core.app.ActivityCompat;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.tasks.Task;&#10;import java.util.Locale;&#10;&#10;/**&#10; * IsInCountry SDK - Main class for checking if device location is within a specific country&#10; */&#10;public class IsInCountrySDK {&#10;    private static IsInCountrySDK instance;&#10;    private Context context;&#10;    private FusedLocationProviderClient fusedLocationClient;&#10;    private ApiClient apiClient;&#10;    private String serverUrl;&#10;&#10;    private IsInCountrySDK(Context context) {&#10;        this.context = context.getApplicationContext();&#10;        this.fusedLocationClient = LocationServices.getFusedLocationProviderClient(this.context);&#10;        this.apiClient = new ApiClient();&#10;    }&#10;&#10;    /**&#10;     * Initialize the SDK with server URL&#10;     * @param context Application context&#10;     * @param serverUrl URL of the IsInCountry API server&#10;     * @return SDK instance&#10;     */&#10;    public static IsInCountrySDK initialize(Context context, String serverUrl) {&#10;        if (instance == null) {&#10;            instance = new IsInCountrySDK(context);&#10;        }&#10;        instance.serverUrl = serverUrl;&#10;        instance.apiClient.setServerUrl(serverUrl);&#10;        return instance;&#10;    }&#10;&#10;    /**&#10;     * Get the singleton instance&#10;     * @return SDK instance&#10;     */&#10;    public static IsInCountrySDK getInstance() {&#10;        if (instance == null) {&#10;            throw new IllegalStateException(&quot;SDK not initialized. Call initialize() first.&quot;);&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    /**&#10;     * Check if current device location is within the device's country&#10;     * @param callback Callback to receive the result&#10;     */&#10;    @RequiresPermission(anyOf = {Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION})&#10;    public void checkCurrentLocationInDeviceCountry(LocationCheckCallback callback) {&#10;        String countryCode = getDeviceCountryCode();&#10;        if (countryCode == null) {&#10;            callback.onError(&quot;Unable to determine device country&quot;);&#10;            return;&#10;        }&#10;        checkCurrentLocationInCountry(countryCode, callback);&#10;    }&#10;&#10;    /**&#10;     * Check if current device location is within a specific country&#10;     * @param countryCode ISO country code (e.g., &quot;US&quot;, &quot;GB&quot;, &quot;FR&quot;)&#10;     * @param callback Callback to receive the result&#10;     */&#10;    @RequiresPermission(anyOf = {Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION})&#10;    public void checkCurrentLocationInCountry(String countryCode, LocationCheckCallback callback) {&#10;        if (!hasLocationPermission()) {&#10;            callback.onError(&quot;Location permission not granted&quot;);&#10;            return;&#10;        }&#10;&#10;        getCurrentLocation(new LocationCallback() {&#10;            @Override&#10;            public void onLocationReceived(double latitude, double longitude) {&#10;                checkCoordinateInCountry(latitude, longitude, countryCode, callback);&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                callback.onError(&quot;Failed to get location: &quot; + error);&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Check if specific coordinates are within a country&#10;     * @param latitude Latitude coordinate&#10;     * @param longitude Longitude coordinate&#10;     * @param countryCode ISO country code&#10;     * @param callback Callback to receive the result&#10;     */&#10;    public void checkCoordinateInCountry(double latitude, double longitude, String countryCode, LocationCheckCallback callback) {&#10;        LocationRequest request = new LocationRequest(latitude, longitude, countryCode);&#10;        apiClient.checkLocation(request, callback);&#10;    }&#10;&#10;    /**&#10;     * Get list of all available countries from the server&#10;     * @param callback Callback to receive the countries list&#10;     */&#10;    public void getCountries(CountriesCallback callback) {&#10;        apiClient.getCountries(callback);&#10;    }&#10;&#10;    /**&#10;     * Get current device location&#10;     * @param callback Callback to receive location&#10;     */&#10;    @RequiresPermission(anyOf = {Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION})&#10;    public void getCurrentLocation(LocationCallback callback) {&#10;        if (!hasLocationPermission()) {&#10;            callback.onError(&quot;Location permission not granted&quot;);&#10;            return;&#10;        }&#10;&#10;        @SuppressWarnings(&quot;MissingPermission&quot;)&#10;        Task&lt;Location&gt; locationTask = fusedLocationClient.getLastLocation();&#10;        locationTask.addOnSuccessListener(location -&gt; {&#10;            if (location != null) {&#10;                callback.onLocationReceived(location.getLatitude(), location.getLongitude());&#10;            } else {&#10;                callback.onError(&quot;Unable to get current location&quot;);&#10;            }&#10;        }).addOnFailureListener(e -&gt; callback.onError(&quot;Location error: &quot; + e.getMessage()));&#10;    }&#10;&#10;    /**&#10;     * Get device country code based on SIM card or network&#10;     * @return ISO country code or null if unavailable&#10;     */&#10;    public String getDeviceCountryCode() {&#10;        try {&#10;            TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);&#10;            if (tm != null) {&#10;                // Try SIM country first&#10;                String simCountry = tm.getSimCountryIso();&#10;                if (simCountry != null &amp;&amp; simCountry.length() == 2) {&#10;                    return simCountry.toUpperCase();&#10;                }&#10;&#10;                // Fall back to network country&#10;                String networkCountry = tm.getNetworkCountryIso();&#10;                if (networkCountry != null &amp;&amp; networkCountry.length() == 2) {&#10;                    return networkCountry.toUpperCase();&#10;                }&#10;            }&#10;&#10;            // Fall back to system locale&#10;            return Locale.getDefault().getCountry();&#10;        } catch (Exception e) {&#10;            return Locale.getDefault().getCountry();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Check if location permission is granted&#10;     * @return true if permission granted, false otherwise&#10;     */&#10;    public boolean hasLocationPermission() {&#10;        return ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED ||&#10;               ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED;&#10;    }&#10;&#10;    /**&#10;     * Callback interface for location results&#10;     */&#10;    public interface LocationCallback {&#10;        void onLocationReceived(double latitude, double longitude);&#10;        void onError(String error);&#10;    }&#10;&#10;    /**&#10;     * Callback interface for location check results&#10;     */&#10;    public interface LocationCheckCallback {&#10;        void onResult(boolean isInCountry, String message);&#10;        void onError(String error);&#10;    }&#10;&#10;    /**&#10;     * Callback interface for countries list results&#10;     */&#10;    public interface CountriesCallback {&#10;        void onResult(ApiClient.CountriesResponse response);&#10;        void onError(String error);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>